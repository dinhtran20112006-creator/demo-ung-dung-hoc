import React, { useState, useRef, useEffect } from 'react';
import { X, Download, Upload, Clock, Brain, Sparkles } from 'lucide-react';
import { GoogleGenAI } from "@google/genai";

// Re-defining Subject here as it's not exported from App.tsx
// In a real app, this would be in a shared types file.
interface Subject {
    id: number;
    name: string;
    chapters: any[]; // Simplified for this component's needs
}

interface BlankPaperModeProps {
  subject: Subject;
  onClose: () => void;
  darkMode: boolean;
}

const BlankPaperMode: React.FC<BlankPaperModeProps> = ({ subject, onClose, darkMode }) => {
  const [recallText, setRecallText] = useState('');
  const [timeElapsed, setTimeElapsed] = useState(0);
  const [isTimerRunning, setIsTimerRunning] = useState(true);
  const [showAIReview, setShowAIReview] = useState(false);
  const [aiFeedback, setAiFeedback] = useState('');
  const [isGeneratingFeedback, setIsGeneratingFeedback] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  // FIX: Initializing useRef with null for consistency and to avoid potential undefined issues. This might be the cause of the cryptic TypeScript error.
  const timerRef = useRef<number | null>(null);

  useEffect(() => {
    if (isTimerRunning) {
      timerRef.current = window.setInterval(() => {
        setTimeElapsed(prev => prev + 1);
      }, 1000);
    }

    // Focus textarea khi component mount
    if (textareaRef.current) {
      textareaRef.current.focus();
    }

    return () => {
      if (timerRef.current) {
        clearInterval(timerRef.current);
      }
    };
  }, [isTimerRunning]);

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };

  const handleSubmitRecall = () => {
    setIsTimerRunning(false);
    if (timerRef.current) {
      clearInterval(timerRef.current);
    }
  };

  const generateAIFeedback = async () => {
    if (!recallText.trim()) return;

    setIsGeneratingFeedback(true);
    try {
      const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
      
      const prompt = `
B·∫°n l√† chuy√™n gia ƒë√°nh gi√° Active Recall. H√£y ph√¢n t√≠ch b√†i recall c·ªßa h·ªçc sinh:

M√îN H·ªåC: ${subject.name}
N·ªòI DUNG RECALL: ${recallText}

H√ÉY PH√ÇN T√çCH THEO:
1. ƒê·ªô bao ph·ªß ki·∫øn th·ª©c (0-10 ƒëi·ªÉm)
2. ƒê·ªô ch√≠nh x√°c c·ªßa th√¥ng tin
3. C·∫•u tr√∫c v√† logic tr√¨nh b√†y
4. G·ª£i √Ω c√°c ƒëi·ªÉm c·∫ßn c·∫£i thi·ªán

ƒê·ªãnh d·∫°ng:
üìä ƒê√ÅNH GI√Å T·ªîNG QUAN: [ƒëi·ªÉm s·ªë]/10
‚úÖ ƒêI·ªÇM M·∫†NH: [li·ªát k√™]
üéØ ƒêI·ªÇM C·∫¶N C·∫¢I THI·ªÜN: [li·ªát k√™]
üí° G·ª¢I √ù: [ƒë·ªÅ xu·∫•t c·ª• th·ªÉ]

Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng tr√™n v√† vi·∫øt b·∫±ng ti·∫øng Vi·ªát.
`;

      const response = await ai.models.generateContent({
        model: "gemini-2.5-pro",
        contents: prompt,
        config: {
          thinkingConfig: { thinkingBudget: 32768 }
        }
      });

      setAiFeedback(response.text);
      setShowAIReview(true);
    } catch (error) {
      console.error('AI Feedback Error:', error);
      setAiFeedback('Xin l·ªói, kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi AI l√∫c n√†y. H√£y t·ª± ƒë√°nh gi√° d·ª±a tr√™n ghi ch√∫ c·ªßa b·∫°n.');
      setShowAIReview(true);
    } finally {
      setIsGeneratingFeedback(false);
    }
  };

  const exportRecall = () => {
    const blob = new Blob([`Blank Paper Recall - ${subject.name}\n\nTh·ªùi gian: ${formatTime(timeElapsed)}\n\n${recallText}`], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `blank-paper-${subject.name}-${new Date().toISOString().split('T')[0]}.txt`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const resetSession = () => {
    setRecallText('');
    setTimeElapsed(0);
    setIsTimerRunning(true);
    setShowAIReview(false);
    setAiFeedback('');
    if (textareaRef.current) {
      textareaRef.current.focus();
    }
  };

  return (
    <div className={`fixed inset-0 ${darkMode ? 'bg-gray-900 text-white' : 'bg-gradient-to-br from-blue-50 to-indigo-100'} z-50 flex flex-col`}>
      {/* Header */}
      <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} shadow-lg p-4 flex justify-between items-center`}>
        <div className="flex items-center gap-4">
          <button onClick={onClose} className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`}>
            <X size={20} />
          </button>
          <div>
            <h1 className="text-2xl font-bold">üìù Blank Paper Mode</h1>
            <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              Vi·∫øt t·∫•t c·∫£ nh·ªØng g√¨ b·∫°n nh·ªõ ƒë∆∞·ª£c v·ªÅ: <strong>{subject.name}</strong>
            </p>
          </div>
        </div>
        
        <div className="flex items-center gap-4">
          <div className={`flex items-center gap-2 px-3 py-2 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
            <Clock size={16} />
            <span className="font-mono">{formatTime(timeElapsed)}</span>
          </div>
          
          <div className="flex gap-2">
            <button onClick={exportRecall} className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`} title="Xu·∫•t recall">
              <Download size={16} />
            </button>
            <button onClick={resetSession} className={`p-2 rounded-lg ${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-100'}`} title="B·∫Øt ƒë·∫ßu l·∫°i">
              <Sparkles size={16} />
            </button>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="flex-1 grid grid-cols-1 lg:grid-cols-2 gap-6 p-6 overflow-hidden">
        {/* Recall Area */}
        <div className={`rounded-2xl shadow-xl flex flex-col ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>
          <div className="p-4 border-b border-gray-200 dark:border-gray-700">
            <h2 className="font-bold text-lg">üß† Vi·∫øt t·∫•t c·∫£ nh·ªØng g√¨ b·∫°n nh·ªõ</h2>
            <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              Kh√¥ng nh√¨n t√†i li·ªáu! Vi·∫øt t·ª± do, kh√¥ng c·∫ßn s·∫Øp x·∫øp
            </p>
          </div>
          
          <textarea
            ref={textareaRef}
            value={recallText}
            onChange={(e) => setRecallText(e.target.value)}
            placeholder="B·∫Øt ƒë·∫ßu vi·∫øt t·∫•t c·∫£ ki·∫øn th·ª©c b·∫°n nh·ªõ ƒë∆∞·ª£c v·ªÅ m√¥n h·ªçc n√†y... 
- C√°c kh√°i ni·ªám ch√≠nh...
- C√¥ng th·ª©c quan tr·ªçng...
- S·ª± ki·ªán, m·ªëc th·ªùi gian...
- M·ªëi quan h·ªá gi·ªØa c√°c √Ω..."
            className={`flex-1 p-6 resize-none focus:outline-none text-lg leading-relaxed ${
              darkMode ? 'bg-gray-800 text-white' : 'bg-white text-gray-900'
            }`}
            disabled={!isTimerRunning}
          />
          
          <div className="p-4 border-t border-gray-200 dark:border-gray-700 flex justify-between">
            <button
              onClick={handleSubmitRecall}
              disabled={!isTimerRunning || !recallText.trim()}
              className="bg-green-500 hover:bg-green-600 disabled:bg-gray-400 text-white px-6 py-2 rounded-lg font-semibold transition"
            >
              Ho√†n th√†nh Recall
            </button>
            
            <div className="flex gap-2">
              <button
                onClick={generateAIFeedback}
                disabled={isTimerRunning || !recallText.trim() || isGeneratingFeedback}
                className="bg-purple-500 hover:bg-purple-600 disabled:bg-gray-400 text-white px-4 py-2 rounded-lg font-semibold transition flex items-center gap-2"
              >
                <Brain size={16} />
                {isGeneratingFeedback ? 'AI ƒëang ph√¢n t√≠ch...' : 'Nh·∫≠n ph·∫£n h·ªìi AI'}
              </button>
            </div>
          </div>
        </div>

        {/* Review Area */}
        <div className={`rounded-2xl shadow-xl flex flex-col ${darkMode ? 'bg-gray-800' : 'bg-white'}`}>
          <div className="p-4 border-b border-gray-200 dark:border-gray-700">
            <h2 className="font-bold text-lg">üìä ƒê√°nh gi√° & So s√°nh</h2>
            <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              {showAIReview ? 'Ph·∫£n h·ªìi t·ª´ AI Coach' : 'Sau khi ho√†n th√†nh recall, b·∫°n c√≥ th·ªÉ nh·∫≠n ph·∫£n h·ªìi AI'}
            </p>
          </div>
          
          <div className="flex-1 p-6 overflow-y-auto">
            {showAIReview ? (
              <div className={`prose max-w-none ${darkMode ? 'prose-invert' : ''}`}>
                <pre className={`whitespace-pre-wrap font-sans text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  {aiFeedback}
                </pre>
                
                <div className="mt-6 p-4 rounded-lg bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800">
                  <h4 className="font-bold text-blue-800 dark:text-blue-300 mb-2">üìö So s√°nh v·ªõi ghi ch√∫</h4>
                  <p className="text-sm text-blue-700 dark:text-blue-400">
                    B√¢y gi·ªù h√£y m·ªü ghi ch√∫ ch√≠nh th·ª©c v√† so s√°nh v·ªõi nh·ªØng g√¨ b·∫°n ƒë√£ vi·∫øt. 
                    T√¨m c√°c ƒëi·ªÉm thi·∫øu s√≥t v√† sai l·ªách ƒë·ªÉ c·ªßng c·ªë ki·∫øn th·ª©c.
                  </p>
                </div>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-full text-center p-8">
                <div className="text-6xl mb-4">üìù</div>
                <h3 className="text-xl font-bold mb-2">Ch·ªù b·∫°n ho√†n th√†nh Recall</h3>
                <p className={`mb-6 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
                  Vi·∫øt t·∫•t c·∫£ ki·∫øn th·ª©c b·∫°n nh·ªõ ƒë∆∞·ª£c v√†o √¥ b√™n tr√°i tr∆∞·ªõc.
                  Sau khi ho√†n th√†nh, AI s·∫Ω gi√∫p b·∫°n ph√¢n t√≠ch v√† ƒë√°nh gi√°.
                </p>
                <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                  <h4 className="font-bold mb-2">üí° M·∫πo Recall hi·ªáu qu·∫£</h4>
                  <ul className="text-sm text-left space-y-1">
                    <li>‚Ä¢ Vi·∫øt t·ª± do, kh√¥ng ch·ªânh s·ª≠a trong l√∫c vi·∫øt</li>
                    <li>‚Ä¢ C·ªë g·∫Øng nh·ªõ c·∫£ c√°c chi ti·∫øt nh·ªè</li>
                    <li>‚Ä¢ S·ª≠ d·ª•ng s∆° ƒë·ªì, bullet points n·∫øu c·∫ßn</li>
                    <li>‚Ä¢ ƒê·ª´ng lo l·∫Øng v·ªÅ sai s√≥t - quan tr·ªçng l√† qu√° tr√¨nh nh·ªõ l·∫°i</li>
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default BlankPaperMode;